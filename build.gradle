plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.riskview'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.mariadb.jdbc:mariadb-java-client'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('bootRun') {
    // JVM 인자를 추가하여 디버그 모드를 활성화합니다.
    // -Xdebug: JVM 디버그 기능을 활성화합니다.
    // -Xrunjdwp: JDWP(Java Debug Wire Protocol) 에이전트를 로드합니다.
    //   transport=dt_socket: 소켓 기반 전송 방식을 사용합니다.
    //   server=y: JVM이 디버그 서버 역할을 하여 디버거 클라이언트의 연결을 기다립니다.
    //   suspend=n: 디버거가 연결될 때까지 JVM을 일시 중지하지 않고 애플리케이션을 바로 시작합니다.
    //              (애플리케이션 시작 시 바로 디버깅하려면 'suspend=y'로 변경하세요.)
    //   address=5005: 디버거가 연결할 포트 번호입니다. 필요에 따라 다른 포트로 변경할 수 있습니다.
    jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005'
}